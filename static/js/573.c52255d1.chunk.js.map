{"version":3,"file":"static/js/573.c52255d1.chunk.js","mappings":"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","sources":["components/error/error.js","components/errorBoundary/errorBoundary.js","components/randomChar/randomChar.js","components/charList/charList.js","components/infoSkeleton/infoSkeleton.js","components/charInfo/charInfo.js","components/searchForm/searchForm.js","components/pages/mainPage.js","hooks/http.hook.js","services/marvelService.js","utils/getContent.js"],"sourcesContent":["import './error.scss'\n\nimport error from './error.gif'\n\nconst Error = props => {\n    return (\n        <img src={error} alt=\"error\" className={`error ${props.className}`} />\n    )\n}\n\nexport default Error","import { Component } from 'react'\n\nimport Error from '../error/error'\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo)\n        this.setState({\n            error: true\n        })\n    }\n\n    render() {\n        if (this.state.error) {\n            return <Error />\n        } else {\n            return this.props.children\n        }\n    }\n}\n\nexport default ErrorBoundary","import { useState, useEffect } from 'react'\nimport useMarvelService from '../../services/marvelService'\n\nimport getContent from '../../utils/getContent'\n\nimport './randomChar.scss'\nimport '../../styles/button.scss'\n\nconst RandomChar = props => {\n    const [char, setChar] = useState({})\n    \n    const {process, getRandomCharacter} = useMarvelService()\n\n    useEffect(updateChar, [])\n\n    async function updateChar() {\n        setChar( await getRandomCharacter() )\n    }\n\n    const View = ({name, thumbnail, objectFit, description, homepage, wiki}) => {\n        return (\n            <>\n                <img src={thumbnail} alt={name} className=\"randomChar__avatar\" style={{ objectFit }} />\n                <div className=\"randomChar__info\"> \n                    <h2 className=\"randomChar__header\">{name}</h2>\n                    <p className=\"randomChar__text\">{description}</p>\n                    <div className=\"randomChar__buttonGroup\">\n                        <a href={homepage} className=\"button button_red\">homepage</a>\n                        <a href={wiki} className=\"button button_gray\">wiki</a>\n                    </div>\n                </div>\n            </>\n        )\n    }\n\n    return (\n        <div className={`randomChar ${props.className}`}>\n            <div className=\"randomChar__container randomChar__container_light randomChar__container_first\">\n                {getContent(process, View, char)}\n            </div>\n            <div className=\"randomChar__container randomChar__container_dark randomChar__container_second\">\n                <div>\n                    <h2 className=\"randomChar__title\">Random character for today!</h2>\n                    <h2 className=\"randomChar__title\">Do you want to get to know him better?</h2>\n                </div>\n                <h2 className=\"randomChar__title\">Or choose another one</h2>\n                <button onClick={updateChar} className=\"button button_red\">try it</button>\n            </div>\n        </div>\n    )\n    \n}\n\nexport default RandomChar","import { useState, useEffect, useRef, useMemo } from 'react'\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\nimport useMarvelService from '../../services/marvelService'\nimport PropTypes from 'prop-types'\n\nimport getContent from '../../utils/getContent'\n\nimport './charList.scss'\nimport '../../styles/button.scss'\n\nconst CharList = props => {\n    const\n        [chars, setChars] = useState([]),\n        [offset, setOffset] = useState(500),\n        [isEnd, setIsEnd] = useState(false)\n    \n    const {process, getCharacters} = useMarvelService()\n\n    useEffect(() => loadChars(9), [])\n\n    function onLoaded(newChars, number) {\n        setChars(chars => [...chars, ...newChars])\n        setOffset(offset => offset + number)\n        setIsEnd(newChars.length < 9)\n    }\n\n    function loadChars(number) {\n        getCharacters(number, offset)\n            .then(chars => onLoaded(chars, number))\n    }\n\n    const cards = useRef([])\n\n    function onSelectChar(index) {\n        cards.current.forEach(card => card.classList.remove('charList__card_selected'))\n        cards.current[index].classList.add('charList__card_selected')\n    }\n\n    function renderCards(chars) {\n        return chars.map((char, index) => {\n            const {id, thumbnail, name} = char\n            \n            const style = { objectFit: null }\n            if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                style.objectFit = 'contain'\n            } else {\n                style.objectFit = 'cover'\n            }\n\n            return (\n                <CSSTransition\n                    timeout={500}\n                    classNames=\"charList__card\"\n                    key={id} >\n                    <li\n                        tabIndex=\"0\"\n                        onClick={() => {\n                            onSelectChar(index)\n                            props.onSelectChar(id)\n                        }}\n                        onKeyPress={event => {\n                            if (event.key === 'Enter') {\n                                onSelectChar(index)\n                                props.onSelectChar(id)\n                            }\n                        }} \n                        className=\"charList__card\" \n                        ref={elem => cards.current[index] = elem} >\n                        <img \n                            src={thumbnail} \n                            alt={name} \n                            className=\"charList__avatar\" \n                            style={style} />\n                        <h3 className=\"charList__header\">{name}</h3>\n                    </li>  \n                </CSSTransition>  \n            )\n        })\n    }\n\n    const Footer = () => {\n        if (isEnd) return null\n        else return (\n            <button \n                onClick={() => loadChars(9)} \n                className=\"button button_red button_long\">\n                load more\n            </button>\n        )\n    }\n\n    const renderedCards = useMemo(() => renderCards(chars), [chars])\n\n    return (\n        <section className={`charList ${props.className}`}>\n            <ul className=\"charList__grid\">\n                <TransitionGroup component={null}>\n                    {renderedCards}\n                </TransitionGroup>\n            </ul>\n            <div className=\"charList__footer\">\n                {getContent(process, Footer)}\n            </div>\n        </section>\n    )\n    \n}\n\nCharList.propTypes = {\n    onSelectChar: PropTypes.func\n}\n\nexport default CharList","import './infoSkeleton.scss'\n\nconst InfoSkeleton = ({className}) => {\n    return (\n       <section className={`infoSkeleton ${className}`}>\n           <div className=\"infoSkeleton__title\">Please select a character to see information</div>\n           <div className=\"infoSkeleton__header\">\n               <div className=\"infoSkeleton__circle\"></div>\n               <div className=\"infoSkeleton__rect\"></div>\n            </div>\n            <div className=\"infoSkeleton__rect infoSkeleton__rect_wide\"></div>\n            <div className=\"infoSkeleton__rect infoSkeleton__rect_wide\"></div>\n            <div className=\"infoSkeleton__rect infoSkeleton__rect_wide\"></div>\n       </section>\n    )\n}\n\nexport default InfoSkeleton","import { Link } from 'react-router-dom'\nimport { useState, useEffect } from 'react'\nimport useMarvelService from '../../services/marvelService'\nimport PropTypes from 'prop-types'\n\nimport getContent from '../../utils/getContent'\n\nimport './charInfo.scss'\nimport '../../styles/button.scss'\n\nconst CharInfo = (props) => {\n    const [char, setChar] = useState({})\n\n    const {process, getCharacter} = useMarvelService()\n\n    useEffect(() => updateChar(props.selectedCharId), [props.selectedCharId])\n\n    async function updateChar(id) {  \n        setChar(await getCharacter(id))\n    }\n\n    const Comics = ({comics}) => {\n        let comicsItems = [];\n        if (comics && comics.length !== 0) {\n\n            for (let i = 0; i < comics.length; i++) {\n                if (i === 10) break \n\n                const comicId = comics[i].resourceURI.match(/\\d+$/)\n\n                comicsItems.push((\n                    <li key={i} className=\"charInfo__item\">\n                        <Link to={`/marvel/comics/${comicId}`}>\n                            {comics[i].name}\n                        </Link>\n                    </li>\n                ))\n            }\n\n        } else {\n            comicsItems = <li>There are no comics with this character</li>\n        }\n        \n        return comicsItems\n    }\n\n    const View = ({name, thumbnail, description, homepage, wiki, comics}) => {\n        const style = { objectFit: null }\n        if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n            style.objectFit = 'contain'\n        } else {\n            style.objectFit = 'cover'\n        }\n\n        return (\n            <>\n                <img src={thumbnail} alt={name} style={{style}} className=\"charInfo__avatar\" />\n                <div className=\"charInfo__header\">\n                    <h3 className=\"charInfo__name\">{name}</h3>\n                    <a href={homepage} className=\"button button_red charInfo__button\">homepage</a>\n                    <a href={wiki} className=\"button button_gray charInfo__button\">wiki</a>    \n                </div>\n                <p className=\"charInfo__descr\">{description}</p>\n                <div className=\"charInfo__listHeader\">Comics:</div>\n                <ul className=\"charInfo__list\">\n                    <Comics comics={comics} />\n                </ul>\n            </>\n        )\n    }\n\n    return (\n        <section className={`charInfo ${props.className}`}>\n            { getContent(process, View, char) }\n        </section>\n    )\n}\n\nCharInfo.propTypes = {\n    selectedCharId: PropTypes.number\n}\n\nexport default CharInfo","import { useState } from \"react\"\nimport { CSSTransition, SwitchTransition } from \"react-transition-group\"\nimport { Formik, Form, Field, ErrorMessage } from \"formik\"\nimport * as Yup from 'yup'\nimport { Link } from \"react-router-dom\"\nimport useMarvelService from \"../../services/marvelService\"\n\nimport './searchForm.scss'\nimport '../../styles/button.scss'\n\nconst SearchForm = ({className}) => {\n    const \n        [message, setMessage] = useState(<></>),\n        [success, setSuccess] = useState(false)\n    \n    const { getCharacterByName } = useMarvelService()\n    \n    return (\n        <Formik\n            initialValues={{\n                query: ''\n            }}\n            validationSchema={Yup.object({\n                query: Yup.string().required('The field is required')\n            })}\n            onSubmit={values => {\n                getCharacterByName(values.query)\n                    .then(char => {\n                        setSuccess(true)\n                        setMessage((\n                            <div className=\"searchForm__message searchForm__message_success\">\n                                There is! Visit {char.name} page?\n                                <Link to={char.id} className=\"button button_gray searchForm__link\">to page</Link> \n                            </div>  \n                        ))\n                    })\n                    .catch(() => {\n                        setSuccess(false)\n                        setMessage((\n                            <div className=\"searchForm__message searchForm__message_error\">\n                                The character was not found. Check the name and try again\n                            </div>\n                        ))\n                    })\n            }}>\n                <Form className={`searchForm ${className}`}>\n                <h3 className=\"searchForm__header\">Or find a character by name:</h3>\n                <div>\n                    <Field \n                        className=\"searchForm__input\" \n                        name=\"query\" \n                        type=\"text\" \n                        placeholder=\"Enter name\" \n                        autoComplete=\"off\" /> \n                </div>\n                <button className=\"button button_red searchForm__button\" type=\"submit\">find</button>\n                <ErrorMessage name=\"query\" component=\"div\" className=\"searchForm__message searchForm__message_error\" />\n                <SwitchTransition mode=\"out-in\">\n                    <CSSTransition\n                        key={success}\n                        timeout={500}\n                        classNames=\"searchForm__message\">\n                        {message}\n                    </CSSTransition>    \n                </SwitchTransition>\n            </Form>\n        </Formik>\n    )\n}   \n\nexport default SearchForm","import { useState } from 'react'\nimport Helmet from 'react-helmet'\n\nimport ErrorBoundary from \"../errorBoundary/errorBoundary\"\nimport RandomChar from \"../randomChar/randomChar\"\nimport CharList from \"../charList/charList\"\nimport InfoSkeleton from \"../infoSkeleton/infoSkeleton\"\nimport CharInfo from \"../charInfo/charInfo\"\nimport SearchForm from '../searchForm/searchForm'\n\nimport vision from '../../resources/images/vision.png'\n\nconst MainPage = () => {\n    const [selectedCharId, setSelectedCharId] = useState(null)\n\n    function onSelectChar(selectedCharId) {\n        setSelectedCharId(selectedCharId)\n    }\n\n    function renderInfo() {\n        if (selectedCharId) {\n            return <CharInfo selectedCharId={selectedCharId} className=\"app__charInfo\" />\n        } else {\n            return <InfoSkeleton className=\"app__charInfo\" />\n        }\n    }\n\n    return (\n        <>\n            <Helmet>\n            <meta\n                name=\"description\"\n                content=\"Marvel information portal\" />\n                <title>Marvel information portal</title>\n            </Helmet>\n            <ErrorBoundary>\n                <RandomChar className=\"app__randomChar\" />\n            </ErrorBoundary>\n            <div className=\"app__charContent\">\n                <ErrorBoundary>\n                    <CharList onSelectChar={onSelectChar} className=\"app__charList\" /> \n                </ErrorBoundary>\n                \n                    <div className=\"app__sidebar\">\n                        <ErrorBoundary>\n                            {renderInfo()}\n                        </ErrorBoundary>\n                        <ErrorBoundary>\n                            <SearchForm className=\"app__searchForm\" />\n                        </ErrorBoundary>\n                    </div>\n                \n            </div>\n            <img src={vision} alt=\"vision\" className=\"app__vision\" />\n        </>\n    )\n}\n\nexport default MainPage","import { useState } from 'react'\n\nconst useHttp = () => {\n    const [process, setProcess] = useState('waiting')\n\n    async function getResource(url) {\n        setProcess('fetching')\n\n        let res\n        try {\n            res = await fetch(url)\n\n            if (!res.ok && res.status !== 404) {\n                throw new Error(`Could not fetch ${url}, status is ${res.status}`)\n            }\n\n            setProcess('waiting')\n            return await res.json()\n        } catch (error) {\n            console.log(error)\n            setProcess('error')\n        }\n    }\n\n    return {getResource, process}\n}\n\nexport default useHttp","import md5 from 'md5'\nimport usehttp from '../hooks/http.hook'\n\nconst useMarvelService = () => {\n    const {getResource, process} = usehttp()\n\n    const \n        _apiBase = 'https://gateway.marvel.com:443/v1/public/',\n        _apiPublicKey = '501c32c8096d96aabefe16305a1b4371',\n        _apiPrivateKey = 'cf3a965c94a82a96ab36e31940ad7a43fba9af96',\n        _ts = '1',\n        _hash = md5(_ts + _apiPrivateKey + _apiPublicKey),\n        _apiAuth = `?apikey=${_apiPublicKey}&ts=${_ts}&hash=${_hash}`\n\n    async function getCharacter(id) {\n        const res = await getResource(`${_apiBase}characters/${id + _apiAuth}`)\n        return _transformChar(res.data.results[0])\n    }\n\n    async function getCharacterByName(name) {\n        const res = await getResource(`${_apiBase}characters?name=${name}&apikey=${_apiPublicKey}`)\n        if (res.data.results[0]) return _transformChar(res.data.results[0])\n        else throw new Error()\n    }\n\n    async function getRandomCharacter() {\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000)\n        try {\n            const res = await getResource(`${_apiBase}characters/${id + _apiAuth}`)\n\n            if (res.code === 404) {\n                throw new Error(`The character with id ${id} does not exist`)\n            }\n\n            return _transformChar(res.data.results[0])\n        } catch (error) {\n            return await getRandomCharacter()\n        }\n    }\n\n    async function getCharacters(number, offset) {\n        const res = await getResource(`${_apiBase}characters${_apiAuth}&limit=${number}&offset=${offset}`)\n        return res.data.results.map(char => _transformChar(char))\n    }\n\n    async function getComic(id) {\n        const res = await getResource(`${_apiBase}comics/${id + _apiAuth}`)\n        return _transformComic(res.data.results[0])\n    }\n\n    async function getComics(number, offset) {\n        const res = await getResource(`${_apiBase}comics${_apiAuth}&limit=${number}&offset=${offset}`)\n        return res.data.results.map(comic => _transformComic(comic))\n    }\n\n    function _transformChar({id, name, description, thumbnail, urls, comics}) {\n        description = description.length > 230 ? description.slice(0, 228) + '...' : description\n        \n        return {\n            id: String(id),\n            name,\n            description: description ? description : 'Description is not available :(',\n            thumbnail: thumbnail.path + '.' + thumbnail.extension,\n            homepage: urls[0].url,\n            wiki: urls[0].url,\n            comics: comics.items\n        }\n    }\n\n    function _transformComic({id, title, prices, thumbnail, description, textObjects, pageCount}) {\n        return {\n            id: String(id),\n            price: prices[0].price + '$',\n            description: description ? description : 'Description is not available :(',\n            language: textObjects.language ? 'Language: ' + textObjects.language : null,\n            thumbnail: thumbnail.path + '.' + thumbnail.extension,\n            title,\n            pageCount: pageCount ? pageCount + ' pages' : null\n        }\n    }\n\n    return {\n        process,\n        getCharacter, \n        getCharacterByName,\n        getRandomCharacter, \n        getCharacters, \n        getComic,\n        getComics\n    }\n}\n\nexport default useMarvelService","import Spinner from \"../components/spinner/spinner\"\nimport Error from \"../components/error/error\"\n\nconst getContent = (process, Component, data=null) => {\n    switch (process) {\n        case 'waiting': \n            return <Component {...data} />\n        case 'fetching':\n            return <Spinner />\n        case 'error':\n            return <Error />\n    }\n}\n\nexport default getContent"],"names":["props","src","error","alt","className","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","useState","char","setChar","useMarvelService","process","getRandomCharacter","updateChar","useEffect","getContent","name","thumbnail","objectFit","description","homepage","wiki","style","href","onClick","chars","setChars","offset","setOffset","isEnd","setIsEnd","getCharacters","loadChars","number","then","newChars","length","onLoaded","cards","useRef","onSelectChar","index","current","forEach","card","classList","remove","add","renderedCards","useMemo","map","id","CSSTransition","timeout","classNames","tabIndex","onKeyPress","event","key","ref","elem","renderCards","TransitionGroup","component","getCharacter","selectedCharId","Comics","comics","comicsItems","i","comicId","resourceURI","match","push","to","message","setMessage","success","setSuccess","getCharacterByName","initialValues","query","validationSchema","Yup","required","onSubmit","values","catch","type","placeholder","autoComplete","SwitchTransition","mode","setSelectedCharId","Helmet","content","vision","setProcess","url","fetch","res","ok","status","Error","json","getResource","usehttp","_apiBase","_apiPublicKey","_hash","md5","_ts","_apiAuth","_transformChar","data","results","Math","floor","random","code","_transformComic","comic","urls","slice","String","path","extension","items","title","prices","textObjects","pageCount","price","language","getComic","getComics"],"sourceRoot":""}