{"version":3,"file":"static/js/601.44cc8ba5.chunk.js","mappings":"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","sources":["components/appBanner/appBanner.js","components/error/error.js","components/pages/singlePage/singlePage.js","hooks/http.hook.js","services/marvelService.js"],"sourcesContent":["import './appBanner.scss'\n\nimport avengers from '../../resources/images/avengers.png'\nimport avengersLogo from '../../resources/images/avengersLogo.png'\n\nconst AppBanner = ({className}) => {\n    return (\n        <section className={`appBanner ${className}`}>\n            <div className=\"appBanner__flex\">\n                <img src={avengers} alt=\"avengers\" className=\"appBanner__avengers\" />\n                <h2 className=\"appBanner__header\">\n                    New comics every week! <br />\n                    Stay tuned!\n                </h2>\n                <img src={avengersLogo} alt=\"avengers logo\" className=\"appBanner__avengersLogo\" />    \n            </div>\n        </section>\n    )\n}\n\nexport default AppBanner","import './error.scss'\n\nimport error from './error.gif'\n\nconst Error = props => {\n    return (\n        <img src={error} alt=\"error\" className={`error ${props.className}`} />\n    )\n}\n\nexport default Error","import { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport useMarvelService from '../../../services/marvelService'\n\nimport AppBanner from '../../appBanner/appBanner'\nimport Error from '../../error/error'\nimport Spinner from '../../spinner/spinner'\n\nconst SinglePage = ({Component, dataType}) => {\n    const [data, setData] = useState(false)\n    const \n        navigate = useNavigate(),\n        { id } = useParams(),\n        {loading, error, getCharacter, getComic} = useMarvelService()\n    \n    let getFunc;\n    switch (dataType) {\n        case 'comics':\n            getFunc = getComic\n            break\n        case 'characters':\n            getFunc = getCharacter\n            break\n    }\n\n    useEffect(async () => updateData(id), [])\n\n    async function updateData(id) {\n        setData( await getFunc(id) )\n    }\n\n    function renderView() {\n        if (loading) return <Spinner />\n        else if (error) return <Error />\n        else return <Component data={data} navigate={navigate} />\n    }\n\n    return (\n        <>\n            <AppBanner className=\"app__appBanner\" />\n            {renderView()}\n        </>\n    )\n}\n\nexport default SinglePage","import { useState } from 'react'\n\nconst useHttp = () => {\n    const [process, setProcess] = useState('waiting')\n\n    async function getResource(url) {\n        setProcess('fetching')\n\n        let res\n        try {\n            res = await fetch(url)\n\n            if (!res.ok && res.status !== 404) {\n                throw new Error(`Could not fetch ${url}, status is ${res.status}`)\n            }\n\n            setProcess('waiting')\n            return await res.json()\n        } catch (error) {\n            console.log(error)\n            setProcess('error')\n        }\n    }\n\n    return {getResource, process}\n}\n\nexport default useHttp","import md5 from 'md5'\nimport usehttp from '../hooks/http.hook'\n\nconst useMarvelService = () => {\n    const {getResource, process} = usehttp()\n\n    const \n        _apiBase = 'https://gateway.marvel.com:443/v1/public/',\n        _apiPublicKey = '501c32c8096d96aabefe16305a1b4371',\n        _apiPrivateKey = 'cf3a965c94a82a96ab36e31940ad7a43fba9af96',\n        _ts = '1',\n        _hash = md5(_ts + _apiPrivateKey + _apiPublicKey),\n        _apiAuth = `?apikey=${_apiPublicKey}&ts=${_ts}&hash=${_hash}`\n\n    async function getCharacter(id) {\n        const res = await getResource(`${_apiBase}characters/${id + _apiAuth}`)\n        return _transformChar(res.data.results[0])\n    }\n\n    async function getCharacterByName(name) {\n        const res = await getResource(`${_apiBase}characters?name=${name}&apikey=${_apiPublicKey}`)\n        if (res.data.results[0]) return _transformChar(res.data.results[0])\n        else throw new Error()\n    }\n\n    async function getRandomCharacter() {\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000)\n        try {\n            const res = await getResource(`${_apiBase}characters/${id + _apiAuth}`)\n\n            if (res.code === 404) {\n                throw new Error(`The character with id ${id} does not exist`)\n            }\n\n            return _transformChar(res.data.results[0])\n        } catch (error) {\n            return await getRandomCharacter()\n        }\n    }\n\n    async function getCharacters(number, offset) {\n        const res = await getResource(`${_apiBase}characters${_apiAuth}&limit=${number}&offset=${offset}`)\n        return res.data.results.map(char => _transformChar(char))\n    }\n\n    async function getComic(id) {\n        const res = await getResource(`${_apiBase}comics/${id + _apiAuth}`)\n        return _transformComic(res.data.results[0])\n    }\n\n    async function getComics(number, offset) {\n        const res = await getResource(`${_apiBase}comics${_apiAuth}&limit=${number}&offset=${offset}`)\n        return res.data.results.map(comic => _transformComic(comic))\n    }\n\n    function _transformChar({id, name, description, thumbnail, urls, comics}) {\n        description = description.length > 230 ? description.slice(0, 228) + '...' : description\n        \n        return {\n            id: String(id),\n            name,\n            description: description ? description : 'Description is not available :(',\n            thumbnail: thumbnail.path + '.' + thumbnail.extension,\n            homepage: urls[0].url,\n            wiki: urls[0].url,\n            comics: comics.items\n        }\n    }\n\n    function _transformComic({id, title, prices, thumbnail, description, textObjects, pageCount}) {\n        return {\n            id: String(id),\n            price: prices[0].price + '$',\n            description: description ? description : 'Description is not available :(',\n            language: textObjects.language ? 'Language: ' + textObjects.language : null,\n            thumbnail: thumbnail.path + '.' + thumbnail.extension,\n            title,\n            pageCount: pageCount ? pageCount + ' pages' : null\n        }\n    }\n\n    return {\n        process,\n        getCharacter, \n        getCharacterByName,\n        getRandomCharacter, \n        getCharacters, \n        getComic,\n        getComics\n    }\n}\n\nexport default useMarvelService"],"names":["className","src","avengers","alt","avengersLogo","props","error","getFunc","Component","dataType","useState","data","setData","navigate","useNavigate","id","useParams","useMarvelService","loading","getCharacter","getComic","updateData","useEffect","process","setProcess","url","fetch","res","ok","status","Error","json","console","log","getResource","usehttp","_apiBase","_apiPublicKey","_hash","md5","_ts","_apiAuth","_transformChar","results","name","getRandomCharacter","Math","floor","random","code","number","offset","map","char","_transformComic","comic","description","thumbnail","urls","comics","length","slice","String","path","extension","homepage","wiki","items","title","prices","textObjects","pageCount","price","language","getCharacterByName","getCharacters","getComics"],"sourceRoot":""}